#!/usr/bin/python
# -*- coding: utf-8 -*-
#

import os
import subprocess

DOCUMENTATION = """
---
module: dockercompose
short_description: start docker containers from a docker-compose yaml description
description:
  - TODO

options:
  path:
    required: true
    description:
      - docker compose installation and decription file directory
"""

EXAMPLES = r"""
Examples:

  - name: start docker containers
    action: dockercompose path=/opt/docker-compose/
"""

#TODO install docker-compose -> re-use get_url ?
#TODO depose docker-compose.yml file

def stopped_containers():
  containers = [c for c in subprocess.check_output(["./docker-compose", "ps", "-q"]).split('\n') if c]
  cmd = ["docker", "inspect", "-f", "{{if not .State.Running}}{{.Name}}{{end}}"] + containers
  return [ c for c in subprocess.check_output(cmd).split('\n') if c]

def start_containers():
  return subprocess.check_output(["./docker-compose", "up", "-d", "--no-recreate"],
                                 stderr=subprocess.STDOUT)

def install_docker_compose(module):
  url  = "https://github.com/docker/compose/releases/download/1.2.0/docker-machine_linux-amd64"
  force = False
  use_proxy = module.params['use_proxy']
  timeout = module.params['timeout']
  last_mod_time = None
  dest = os.path.join(os.path.expanduser(module.params['path']), 'docker-compose')

  if os.path.exists(dest):
    return (False, dest + " already exists")

  if module.check_mode: return (True, "Should download " + dest)

  # download to tmpsrc
  tmpsrc, info = url_get(module, url, dest, use_proxy, last_mod_time, force, timeout)

  # raise an error if there is no tmpsrc file
  if not os.path.exists(tmpsrc):
    os.remove(tmpsrc)
    module.fail_json(changed=False, msg="Unable to install  docker-compose", status_code=info['status'], response=info['msg'])
  if not os.access(tmpsrc, os.R_OK):
    os.remove(tmpsrc)
    module.fail_json(changed=False, msg="Source %s not readable" % (tmpsrc))

  if not os.access(os.path.dirname(dest), os.W_OK):
    os.remove(tmpsrc)
    module.fail_json(changed=False, msg="Destination %s not writable" % (os.path.dirname(dest)))

  try:
    shutil.copyfile(tmpsrc, dest)
  except Exception, err:
    os.remove(tmpsrc)
    module.fail_json(msg="failed to copy %s to %s: %s" % (tmpsrc, dest, str(err)))
  os.remove(tmpsrc)
  #TODO check file attributes
  return (True, "docker-compose installed successfully")

def present(module):
  changed, msg = install_docker_compose(module)
  to_start = stopped_containers()
  if to_start:
    if not module.check_mode:
      msg += "\n" + start_containers()
    else:
      msg += "\n" + "should start " + ", ".join(to_start)
    changed = True
    
  module.exit_json(changed=changed, msg=msg)

def absent(module):
  msg="Absent not implemented yet"
  module.fail_json(changed=False, msg=msg)

def main():
    argument_spec = url_argument_spec()
    argument_spec.update(
      #get_url argument spec
      timeout = dict(required=False, type='int', default=10),
    )
    argument_spec.update(
      #this module argument spec
      path=dict(required=True),
      state=dict(default='present', choices=['absent', 'present']),
    )
    module = AnsibleModule(
        argument_spec=argument_spec,
        supports_check_mode=True
    )

    path = module.params['path']

    if 'path' not in module.params:
        module.fail_json(msg='path= is required')

    os.chdir(path)

    if module.params['state'] == 'present':
        present(module)
    else:
        absent(module)

from ansible.module_utils.basic import *
from ansible.module_utils.urls import *
main()

